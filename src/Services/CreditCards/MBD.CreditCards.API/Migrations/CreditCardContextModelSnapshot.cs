// <auto-generated />
using System;
using MBD.CreditCards.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MBD.CreditCards.API.Migrations
{
    [DbContext(typeof(CreditCardContext))]
    partial class CreditCardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_account_id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("brand");

                    b.Property<int>("ClosingDay")
                        .HasColumnType("integer")
                        .HasColumnName("closing_day");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfPayment")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_payment");

                    b.Property<decimal>("Limit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_credit_cards");

                    b.ToTable("credit_cards");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.CreditCardBill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClosesIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("closes_in");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_card_id");

                    b.Property<Guid?>("CreditCardId1")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_card_id1");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_credit_card_bills");

                    b.HasIndex("CreditCardId")
                        .HasDatabaseName("ix_credit_card_bills_credit_card_id");

                    b.HasIndex("CreditCardId1")
                        .HasDatabaseName("ix_credit_card_bills_credit_card_id1");

                    b.ToTable("credit_card_bills");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreditCardBillId")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_card_bill_id");

                    b.Property<Guid?>("CreditCardBillId1")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_card_bill_id1");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("CreditCardBillId")
                        .HasDatabaseName("ix_transactions_credit_card_bill_id");

                    b.HasIndex("CreditCardBillId1")
                        .HasDatabaseName("ix_transactions_credit_card_bill_id1");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.CreditCardBill", b =>
                {
                    b.HasOne("MBD.CreditCards.Domain.Entities.CreditCard", null)
                        .WithMany()
                        .HasForeignKey("CreditCardId")
                        .HasConstraintName("fk_credit_card_bills_credit_cards_credit_card_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBD.CreditCards.Domain.Entities.CreditCard", null)
                        .WithMany("Bills")
                        .HasForeignKey("CreditCardId1")
                        .HasConstraintName("fk_credit_card_bills_credit_cards_credit_card_id1");

                    b.OwnsOne("MBD.CreditCards.Domain.ValueObjects.BillReference", "Reference", b1 =>
                        {
                            b1.Property<Guid>("CreditCardBillId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("reference_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("reference_year");

                            b1.HasKey("CreditCardBillId")
                                .HasName("pk_credit_card_bills");

                            b1.ToTable("credit_card_bills");

                            b1.WithOwner()
                                .HasForeignKey("CreditCardBillId")
                                .HasConstraintName("fk_credit_card_bills_credit_card_bills_id");
                        });

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MBD.CreditCards.Domain.Entities.CreditCardBill", null)
                        .WithMany()
                        .HasForeignKey("CreditCardBillId")
                        .HasConstraintName("fk_transactions_credit_card_bills_credit_card_bill_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBD.CreditCards.Domain.Entities.CreditCardBill", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CreditCardBillId1")
                        .HasConstraintName("fk_transactions_credit_card_bills_credit_card_bill_id1");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.CreditCard", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("MBD.CreditCards.Domain.Entities.CreditCardBill", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
